<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dsbath.admin.model.mapper.NoticeMapper">

	
<!--============== 공지사항 목록 조회 START ==============-->
	<select id="select" parameterType="com.dsbath.admin.model.dto.PagingDTO" resultMap="noticeList">
		SELECT
			N.NoticeIdx,
			N.Title,
			N.Content,
			N.Hit,
			N.IsImport,
			N.IsPopup,
			N.IsComment,
			N.PopupStartDate,
			N.PopupEndDate,
			N.CreateDate,
			N.UpdateDate,
			
			A.AdminIdx,
			A.AdminName
			
		 FROM Notice AS N
		
		<!-- 공통 조건 -->
		<include refid="selectOfWhere"></include>	 
		
		<!-- order -->
		<choose>
			<when test='@com.dsbath.admin.etc.util.StringUtil@isNotEmpty(sort) and @com.dsbath.admin.etc.util.StringUtil@isNotEmpty(sortType)'>
				ORDER BY
				
				<choose>
					<when test='"title".equals(sortType)'>
						N.Title
					</when>
					<when test='"adminName".equals(sortType)'>
						A.AdminName
					</when>
					<when test='"createDate".equals(sortType)'>
						N.CreateDate
					</when>
					<when test='"updateDate".equals(sortType)'>
						N.UpdateDate
					</when>
					<when test='"hit".equals(sortType)'>
						N.Hit
					</when>
				</choose>
				
				<choose>
					<when test='"asc".equals(sort)'>
						ASC
					</when>
					<when test='"desc".equals(sort)'>
						DESC
					</when>
				</choose>
			</when>
			
			<otherwise>
				ORDER BY CreateDate DESC
			</otherwise>
		</choose>
	 	
		<!-- paging -->
		LIMIT #{page}, #{limit}
	</select>
<!--============== 공지사항 목록 조회 END ==============-->

	
<!--============== 공지사항 목록 Total Count START ==============-->
	<select id="selectOfTotalCount" parameterType="com.dsbath.admin.model.dto.PagingDTO" resultType="long">
		SELECT COUNT(N.NoticeIdx)
		  FROM Notice AS N
		  
	  	<!-- 공통 조건 -->
		<include refid="selectOfWhere"></include>
	</select>
<!--============== 공지사항 목록 Total Count END ==============-->

	
<!--============== 공지사항 상세 조회 START ==============-->
	<select id="detail" parameterType="notice" resultMap="noticeList">
		SELECT
			N.NoticeIdx,
			N.Title,
			N.Content,
			N.Hit,
			N.IsImport,
			N.IsPopup,
			N.IsComment,
			N.PopupStartDate,
			N.PopupEndDate,
			N.CreateDate,
			N.UpdateDate,
			
			A.AdminIdx,
			A.AdminName
			
		 FROM Notice AS N
		 
		 LEFT JOIN Admin AS A ON A.AdminIdx = N.AdminIdx
		 
		WHERE N.NoticeIdx = #{noticeIdx}
	 </select>
<!--============== 공지사항 상세 조회 END ==============-->


<!--============== 공지사항 등록 START ==============-->
	<insert id="insert" parameterType="notice">
		INSERT INTO Notice
		(
			AdminIdx,
			Title,
			Content,
			Hit,
			IsImport,
			IsPopup,
			IsComment,
			PopupStartDate,
			PopupEndDate
		)
		VALUES
		(
			#{adminIdx},
			#{title},
			#{content},
			0,
			#{isImport},
			#{isPopup},
			#{isComment},
			#{popupStartDate},
			#{popupEndDate}
		)
	</insert>
<!--============== 공지사항 등록 END ==============-->


<!--============== 공지사항 수정 START ==============-->
	<update id="update" parameterType="notice">
		UPDATE Notice
		   SET
		   		title			= #{title},
		   		content			= #{content},
		   		isImport		= #{isImport},
		   		isPopup			= #{isPopup},
		   		isComment		= #{isComment},
		   		popupStartDate	= #{popupStartDate},
		   		popupEndDate	= #{popupEndDate}
		   		
		 WHERE NoticeIdx = #{noticeIdx}
	</update>
<!--============== 공지사항 수정 END ==============-->


<!--============== 공지사항 삭제 START ==============-->
	<delete id="delete" parameterType="notice">
		DELETE FROM Notice
		 WHERE NoticeIdx = #{noticeIdx}
	</delete>
<!--============== 공지사항 삭제 END ==============-->

	
<!--============== 공지사항 목록 Result Map START ==============-->
	<resultMap type="notice" id="noticeList" autoMapping="true">
		<id property="noticeIdx" column="NoticeIdx"/>
		
		<collection ofType="admin" property="admin" autoMapping="true">
			<id property="adminIdx" column="AdminIdx"/>
		</collection>
	</resultMap>
<!--============== 공지사항 목록 Result Map END ==============-->


<!--============== 목록 조회 공통 조건 START ==============-->
	<sql id="selectOfWhere">
		LEFT JOIN Admin AS A ON A.AdminIdx = N.AdminIdx
		
		<where>
			<if test='@com.dsbath.admin.etc.util.StringUtil@isNotEmpty(model.admin.adminName)'>
				<!-- 관리자 이름 -->
				AND A.AdminName LIKE CONCAT ('%', TRIM(#{model.admin.adminName}), '%')
			</if>
			
			<if test='@com.dsbath.admin.etc.util.StringUtil@isNotEmpty(model.title)'>
				<!-- 제목 -->
				AND N.Title LIKE CONCAT ('%', TRIM(#{model.title}), '%')
			</if>
			
			<if test='@com.dsbath.admin.etc.util.StringUtil@isNotEmpty(model.content)'>
				<!-- 내용 -->
				AND N.Content LIKE CONCAT ('%', TRIM(#{model.content}), '%')
			</if>
			
			<if test='@com.dsbath.admin.etc.util.StringUtil@isNotEmpty(startDateStr) and @com.dsbath.admin.etc.util.StringUtil@isNotEmpty(endDateStr)'>
		 		<!-- 등록일 -->
		 		AND DATE_FORMAT(N.CreateDate, '%Y%m%d') BETWEEN #{startDateStr} AND #{endDateStr}
		 	</if>
		 	
		 	<if test='@com.dsbath.admin.etc.util.StringUtil@isNotEmpty(model.isImport)'>
		 		<!-- 중요 여부 -->
		 		AND N.IsImport = #{model.isImport}
		 	</if>
		 	
		 	<if test='@com.dsbath.admin.etc.util.StringUtil@isNotEmpty(model.isPopup)'>
		 		<!-- 팝업 여부 -->
		 		AND N.IsPopup = #{model.isPopup}
		 	</if>
		 	
		 	<if test='@com.dsbath.admin.etc.util.StringUtil@isNotEmpty(model.isComment)'>
		 		<!-- 코멘트 여부 -->
		 		AND N.IsComment = #{model.isComment}
		 	</if>
		</where>
	</sql>
<!--============== 목록 조회 공통 조건 END ==============-->

</mapper>